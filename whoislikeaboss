#!/usr/bin/env python3

#
# Orginal: https://labs.portcullis.co.uk/tools/whois-like-a-boss/
#

###########
# IMPORTS #
###########

import sys
import os
import subprocess
import re
import argparse
from ipaddress import IPv4Address, IPv4Network, summarize_address_range
from tqdm import tqdm

#############
# FUNCTIONS #
#############


def whois(address):
    p = subprocess.Popen(['whois', address], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    response = p.communicate()[0].decode()

    if "Copyright LACNIC lacnic.net" in response:
        mark = "Copyright LACNIC lacnic.net"
        source = "LACNIC"
        nrange = "inetnum:"
        nname = "ownerid:"
        owner = "owner:"
    elif "ARIN WHOIS" in response:
        mark = "ARIN WHOIS"
        source = "ARIN"
        nrange = "NetRange:"
        nname = "NetName:"
        owner = "(Customer:|OrgName:|Organization:)"
    elif "RIPE Database" in response:
        mark = "RIPE Database"
        source = "RIPE"
        nrange = "inetnum:"
        nname = "netname:"
        owner = "(org-name:|address:|descr:)"
    elif "whois.apnic.net" in response:
        mark = "whois.apnic.net"
        source = "APNIC"
        nrange = "inetnum:"
        nname = "netname:"
        owner = "org-name:"
    else:
        sys.stderr.write(f"{address} => whois response cannot be parsed...is the WHOIS database supported!?\n")
        sys.stderr.flush()
        return

    process = False
    result = list()

    for line in response.split("\n"):
        if mark in line:
            process = True

        if not process:
            continue

        re_nrange = re.search(nrange, line)
        if re_nrange: 
            result.append({ 'source': source })
            if 'range' not in result[len(result) - 1]:
                result[len(result) - 1]['range'] = line.split(":")[1].strip()

        re_owner = re.search(owner, line)     
        if re_owner and not 'owner' in result[len(result) - 1]:
            if 'owner' not in result[len(result) - 1]:
                result[len(result) - 1]['owner'] = line.split(":")[1].strip()

        re_nname = re.search(nname, line) 
        if re_nname:
            if 'netname' not in result[len(result) - 1]:
                result[len(result) - 1]['netname'] = line.split(":")[1].strip()

    return result

########
# MAIN #
########

if __name__ == '__main__':
    desc = 'Perform a whois lookup on provided IP address(es) and return network range memebrship and owner information.'

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('file',
                        nargs='?',
                        type=argparse.FileType('r'),
                        action='store',
                        help='file containing a list of IP addresses split by a newline, otherwise read from STDIN',
                        metavar='FILE',
                        default=sys.stdin)
    parser.add_argument('--csv',
                        action='store_true',
                        help='output in CSV format')
    parser.add_argument('--cidr',
                        action='store_true',
                        help='output network range in CIDR notation')
    parser.add_argument('--count',
                        action='store_true',
                        help='output total count instead of a list of addresses')
    '''
    parser.add_argument('-g', '--geolite',
                        action='store',
                        help='path to MaxMind\'s GeoLite2 Country database file',
                        metavar='DB',
                        default=None)
    '''
    args = parser.parse_args()

    '''
    if args.geolite:
        import geoip2.database
        reader = geoip2.database.Reader(args.geolite)
    '''

    try:
        addresses = [line.strip() for line in args.file if len(line.strip())>0 and line[0] != '#']
    except KeyboardInterrupt:
        exit()

    results = dict()
    
    for address in tqdm(addresses, leave=False):
        result = None

        # Check results first
        ip_address = IPv4Address(address)
        for ip_network in results.keys():
            if ip_address in ip_network:
                result = results[ip_network]
                break

        # Not in results, query whois
        if not result:
            data = whois(address)
            if data:
                last_count = 2147483647

                for record in data:
                    if '/' not in record['range']:
                        first = IPv4Address(record['range'].split('-')[0].strip())
                        last = IPv4Address(record['range'].split('-')[1].strip())
                        networks = list(summarize_address_range(first, last))
                        for network in networks:
                            if IPv4Address(address) in network:
                                if len(list(network.hosts())) < last_count:
                                    last_count = len(list(network.hosts()))
                                    result = record
                                    result['cidr'] = network
                    else:
                        if len(list(IPv4Network(record['range']).hosts())) < last_count:
                            last_count = len(list(IPv4Network(record['range']).hosts()))
                            result = record
                            result['cidr'] = IPv4Network(record['range'])
                if result:
                    results[result['cidr']] = result
                else:
                    sys.stderr.write(f"{address} => ohoh, no network object found, fixme!\n")
                    sys.stderr.flush()
                    continue
            else:
                sys.stderr.write(f"{address} => ohoh, whois returned no data!\n")
                sys.stderr.flush()
                continue
        
        if 'addresses' not in results[result['cidr']]:
            results[result['cidr']]['addresses'] = list()
            
        results[result['cidr']]['addresses'].append(address)


    for item in results.values():
        if args.cidr:
            network = str(item['cidr'])
        else:
            network = item['range']

        if args.csv:
            if not args.count:
                for address in item['addresses']:
                    print(f"{address},{network},{item['netname']},{item['owner']},{item['source']}")
            else:
                print(f"{len(item['addresses'])},{network},{item['netname']},{item['owner']},{item['source']}")
        else:
            print(f"{item['source']} - {item['netname']} - {item['owner']}")
            sys.stdout.write(f"\t{network}\t: ")
            if not args.count:
                print(f"{', '.join(item['addresses'])}")
            else:
                sys.stdout.write(f"{len(item['addresses'])} IP ")
                sys.stdout.write('addresses') if len(item['addresses']) > 1 else sys.stdout.write('address')
                print(" in network")
