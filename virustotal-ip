#!/usr/bin/env python3

###########
# IMPORTS #
###########

import os
import sys
import argparse
import asyncio
import aiohttp
from aiohttp import ClientSession, TCPConnector

###########
# CLASSES #
###########

# TaskPool class taken from https://github.com/cgarciae/pypeln/blob/0.3.3/pypeln/task/utils.py

class TaskPool(object):
    def __init__(self, workers):
        self.semaphore = asyncio.Semaphore(workers) if workers else None
        self.tasks = set()
        self.closed = False

    async def put(self, coro):

        if self.closed:
            raise RuntimeError("Trying put items into a closed TaskPool")

        if self.semaphore:
            await self.semaphore.acquire()

        task = asyncio.create_task(coro)
        self.tasks.add(task)
        task.add_done_callback(self.on_task_done)
        task.set_exception

    def on_task_done(self, task):
        task
        self.tasks.remove(task)

        if self.semaphore:
            self.semaphore.release()

    async def join(self):
        await asyncio.gather(*self.tasks)
        self.closed = True

    async def __aenter__(self):
        return self

    def __aexit__(self, exc_type, exc, tb):
        return self.join()

####################
# GLOBAL VARIABLES #
####################

global key

#############
# FUNCTIONS #
#############

async def fetch(url, address, session):
    try:
        params = {'ip': address, 'apikey': key}
        async with session.get(url, params=params) as response:
            if response.status == 200:
                json = await response.json()
                if json and 'resolutions' in json.keys():
                    for entry in json['resolutions']:
                        hostname = entry.get('hostname')
                        if hostname:
                            sys.stdout.write('%s,%s\n' % (address, hostname))
                            sys.stdout.flush()
    except Exception as e:
            sys.stderr.write(f"{url} =>  Unexpected exception: {e}\n")

async def run(addresses):
    url = "https://www.virustotal.com/vtapi/v2/ip-address/report"
    async with ClientSession(connector=TCPConnector(limit=None)) as session, TaskPool(1) as tasks:
        for address in addresses:
            await tasks.put(fetch(url, address, session))

########
# MAIN #
########

if __name__ == '__main__':
    desc = 'Obtain observed hostnames from VirusTotal for the supplied IP addresses and output results in CSV format.'

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('file',
                        nargs='?',
                        type=argparse.FileType('r'),
                        action='store',
                        help='file containing a list of IP addresses split by a newline, otherwise read from STDIN',
                        metavar='FILE',
                        default=sys.stdin)
    args = parser.parse_args()

    # Check for DNSDB env
    try:
        key = os.environ['VIRUSTOTAL_KEY']
        if not key:
            sys.stderr.write("Error: VIRUSTOTAL_KEY environment variable is empty, unable to obtain server url, please set accordingly.\n")
            exit(1)
    except KeyError:
        sys.stderr.write("Error: VIRUSTOTAL_KEY environment variable not set, unable to obtain server url, please set accordingly.\n")
        exit(1)

    try:
        addresses = [line.strip() for line in args.file if len(line.strip())>0 and line[0] != '#']
    except KeyboardInterrupt:
        exit()

    # remove duplicates and sort
    addresses = sorted(set(addresses))

    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(run(addresses))
    except KeyboardInterrupt:
        sys.stderr.write("\nCaught keyboard interrupt, cleaning up...\n")
        asyncio.gather(*asyncio.Task.all_tasks()).cancel()
        loop.stop()
    finally:
        loop.close()
